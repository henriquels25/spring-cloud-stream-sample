plugins {
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '3.2.0'
    id 'com.adarshr.test-logger' version '2.1.1'
}

repositories {
    mavenCentral()
}

allprojects {
    version = '1.0.2'
    group = 'com.henriquels25.airlines'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'org.sonarqube'
    apply plugin: 'com.adarshr.test-logger'
    sonarqube {
        properties {
            property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "henriquels25_spring-cloud-stream-sample"
        property "sonar.organization", "henriquels"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
// task to gather code coverage from multiple subprojects
// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
// that `test` (or other tasks generating code coverage) run before generating the report.
// You can achieve this by calling the `test` lifecycle task manually
// $ ./gradlew test codeCoverageReport
tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.required = true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.required = true
    }
}

testlogger {
    showSimpleNames true
}
